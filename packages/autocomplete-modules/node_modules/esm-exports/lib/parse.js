"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const entry_1 = require("./entry");
const get_1 = require("./get");
const resolve = require("resolve");
function hasDefaultKeyword(node) {
    return Boolean(node && node.modifiers && node.modifiers.find(m => m.kind === ts.SyntaxKind.DefaultKeyword));
}
class EntrySet {
    constructor() {
        this.result = [];
        this.set = new Set();
    }
    push(entry) {
        const id = entry.id();
        if (!this.set.has(id)) {
            this.set.add(id);
            this.result.push(entry);
        }
    }
}
function getDeclarations(node, options) {
    const result = [];
    const declarations = get_1.get('declarationList.declarations', node) || [];
    declarations.forEach(d => {
        const name = d && d.name && d.name.text;
        if (name) {
            result.push(new entry_1.Entry(Object.assign({}, options, { name })));
        }
        const names = get_1.get('name.elements', d) || [];
        names.forEach(d => {
            const name = d && d.name && d.name.text;
            result.push(new entry_1.Entry(Object.assign({}, options, { name })));
        });
    });
    const name = node.name && node.name.text;
    if (name) {
        const isDefault = hasDefaultKeyword(node);
        result.push(new entry_1.Entry(Object.assign({}, options, { name, isDefault })));
    }
    return result;
}
function parse(sourceText, options = {}) {
    const sourceFile = ts.createSourceFile('dummy.ts', sourceText, ts.ScriptTarget.ES2015, true);
    let { module, filepath } = options; // eslint-disable-line tslint/config
    let moduleEnd;
    let moduleName;
    const moduleBlockDeclarations = {};
    const entrySet = new EntrySet();
    let exportExpression;
    walk(sourceFile);
    function walk(statement) {
        const node = statement;
        if (node.pos >= moduleEnd) {
            module = options.module;
            moduleName = undefined;
            moduleEnd = undefined;
        }
        switch (node.kind) {
            case ts.SyntaxKind.ModuleDeclaration:
                {
                    const isDeclare = Boolean(node.modifiers && node.modifiers.find(m => m.kind === ts.SyntaxKind.DeclareKeyword));
                    if (!isDeclare) {
                        break;
                    }
                    moduleName = node.name && node.name.text;
                    if (moduleName) {
                        if (resolve.isCore(moduleName)) {
                            module = moduleName;
                        }
                    }
                    moduleEnd = node.end;
                }
                break;
            // case ts.SyntaxKind.VariableStatement:
            case ts.SyntaxKind.VariableDeclarationList:
            case ts.SyntaxKind.FunctionDeclaration:
            case ts.SyntaxKind.ClassDeclaration:
            case ts.SyntaxKind.InterfaceDeclaration:
            case ts.SyntaxKind.TypeAliasDeclaration:
            case ts.SyntaxKind.EnumDeclaration:
            case ts.SyntaxKind.VariableDeclaration:
                {
                    if (node.parent.kind === ts.SyntaxKind.ModuleBlock) {
                        if (moduleName) {
                            const entries = getDeclarations(node, { module, filepath });
                            if (!Array.isArray(moduleBlockDeclarations[moduleName])) {
                                moduleBlockDeclarations[moduleName] = [];
                            }
                            moduleBlockDeclarations[moduleName].push(...entries);
                        }
                    }
                }
                break;
            case ts.SyntaxKind.ExportDeclaration:
                {
                    const node = statement;
                    const names = [];
                    const exportAll = !(node.exportClause && node.exportClause.elements);
                    if (exportAll) {
                        names.push(undefined);
                    }
                    else if (node.exportClause) {
                        node.exportClause.elements.forEach(e => names.push(e.name.text));
                    }
                    const specifier = get_1.get('moduleSpecifier.text', node);
                    const isDefault = hasDefaultKeyword(node);
                    names.forEach(name => {
                        const entry = new entry_1.Entry({ name, module, filepath, specifier, isDefault });
                        entrySet.push(entry);
                    });
                }
                break;
            case ts.SyntaxKind.ExportKeyword:
                {
                    const entries = getDeclarations(node.parent, { module, filepath });
                    entries.forEach(entry => entrySet.push(entry));
                }
                break;
            case ts.SyntaxKind.ExportAssignment:
                {
                    exportExpression = node.expression;
                }
                break;
            case ts.SyntaxKind.BinaryExpression:
                {
                    const node = statement;
                    if (node.left.kind === ts.SyntaxKind.PropertyAccessExpression && node.left.expression.kind === ts.SyntaxKind.PropertyAccessExpression) {
                        const property = node.left;
                        if (property.expression.getText() === 'module.exports') {
                            const name = property.name.text;
                            entrySet.push(new entry_1.Entry({ name, module, filepath, cjs: true }));
                        }
                    }
                }
                break;
        }
        if (node.kind === ts.SyntaxKind.SourceFile
            || node.kind === ts.SyntaxKind.ModuleDeclaration
            || (node.parent && node.parent.kind === ts.SyntaxKind.SourceFile)
            || (node.parent && node.parent.kind === ts.SyntaxKind.ModuleDeclaration)
            || (node.parent && node.parent.parent && node.parent.parent.kind === ts.SyntaxKind.SourceFile)
            || (node.parent && node.parent.parent && node.parent.parent.kind === ts.SyntaxKind.ModuleDeclaration)) {
            ts.forEachChild(node, walk);
        }
    }
    if (exportExpression) {
        const exportText = exportExpression.getText();
        const declarations = moduleBlockDeclarations[exportText];
        if (Array.isArray(declarations)) {
            declarations.forEach(entry => {
                entry.cjs = true;
                entry.ts = true;
                entrySet.push(entry);
            });
        }
        else if (module) {
            entrySet.result.push(new entry_1.Entry({ module, cjs: true, ts: true }));
        }
        else if (exportExpression.kind === ts.SyntaxKind.Identifier && exportText) {
            entrySet.result.push(new entry_1.Entry({ name: exportText, module, filepath, isDefault: true }));
        }
    }
    return entrySet.result;
}
exports.parse = parse;
//# sourceMappingURL=data:application/json;base64,